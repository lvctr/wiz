use crate::span::{Span, DUMMY_SPAN};

#[derive(Debug, Eq, PartialEq, Copy, Clone)]
pub enum CommentKind {
    Line,
    Block,
}

#[derive(Debug, Eq, PartialEq, Copy, Clone)]
pub enum BinOpToken {
    Plus,
    Minus,
    Star,
    Slash,
    Percent,
    Caret,
    And,
    Or,
    Shl,
    Shr,
}

#[derive(Debug, Eq, PartialEq, Copy, Clone)]
pub enum LitKind {
    Bool,
    Byte,
    Char,
    Integer,
    Float,
    Str,
    StrRaw,
    ByteStr,
    ByteStrRaw,
    Err,
}

#[derive(Debug, Eq, PartialEq, Copy, Clone)]
pub enum DelimToken {
    /// A round parenthesis (i.e., `(` or `)`).
    Paren,
    /// A square bracket (i.e., `[` or `]`).
    Bracket,
    /// A curly brace (i.e., `{` or `}`).
    Brace,
    /// An empty delimiter.
    NoDelim,
}

pub struct Lit {
    pub kind: LitKind,
}

pub enum TokenKind {
    /* Expression-operator symbols. */
    Eq,
    Lt,
    Le,
    EqEq,
    Ne,
    Ge,
    Gt,
    AndAnd,
    OrOr,
    Not,
    Tilde,
    BinOp(BinOpToken),
    BinOpEq(BinOpToken),

    /* Structural symbols */
    At,
    Dot,
    DotDot,
    DotDotDot,
    DotDotEq,
    Comma,
    Semi,
    Colon,
    ModSep,
    RArrow,
    LArrow,
    FatArrow,
    Pound,
    Dollar,
    Question,
    /// Used by proc macros for representing lifetimes, not generated by lexer right now.
    SingleQuote,
    /// An opening delimiter (e.g., `{`).
    OpenDelim(DelimToken),
    /// A closing delimiter (e.g., `}`).
    CloseDelim(DelimToken),

    /* Literals */
    Literal(Lit),

    /// Identifier token.
    /// Do not forget about `NtIdent` when you want to match on identifiers.
    /// It's recommended to use `Token::(ident,uninterpolate,uninterpolated_span)` to
    /// treat regular and interpolated identifiers in the same way.
    Ident(/* is_raw */ bool),
    /// Lifetime identifier token.
    /// Do not forget about `NtLifetime` when you want to match on lifetime identifiers.
    /// It's recommended to use `Token::(lifetime,uninterpolate,uninterpolated_span)` to
    /// treat regular and interpolated lifetime identifiers in the same way.
    Lifetime,

    /// TODO: AST struct
    Interpolated,

    /// A doc comment token.
    /// `Symbol` is the doc comment's data excluding its "quotes" (`///`, `/**`, etc)
    /// similarly to symbols in string literal tokens.
    DocComment(CommentKind, AttrStyle),

    Eof,
}

pub enum AttrStyle {
    Inner,
    Outer,
}

pub struct Token {
    pub kind: TokenKind,
    pub span: Span,
}

impl Token {
    pub fn new(kind: TokenKind, span: Span) -> Self {
        Self { kind, span }
    }

    pub fn dummy() -> Self {
        Self::new(TokenKind::Question, DUMMY_SPAN)
    }
}

pub enum Spacing {
    Alone,
    Joint,
}

pub enum TokenTree {
    /// A single token.
    Token(Token),
    /// A delimited sequence of token trees.
    Delimited(DelimSpan, DelimToken, TokenStream),
}

pub struct DelimSpan {
    pub open: Span,
    pub close: Span,
}

pub type TreeAndSpacing = (TokenTree, Spacing);

#[derive(Default)]
pub struct TokenStream(pub Vec<TreeAndSpacing>);

impl TokenStream {
    pub fn new(stream: Vec<TreeAndSpacing>) -> Self {
        Self(stream)
    }
}